#!/usr/bin/env python3

import os
import sys

# ROS
import rospy
import numpy as np
from torch import tensor
import cv2
from cv_bridge import CvBridge, CvBridgeError
from yolox.exp import get_exp
from clf_object_recognition_yolox import recognizer, util
from clf_object_recognition_msgs.srv import Detect2D, Detect2DImage

from sensor_msgs.msg import Image as ImgMsg

from dynamic_reconfigure.server import Server
from clf_object_recognition_cfg.cfg import YoloxConfig ##?
########
import message_filters
from sensor_msgs.msg import Image, CameraInfo, PointCloud
########
import std_msgs.msg
from geometry_msgs.msg import PoseArray, Pose
from image_geometry import cameramodels

class YoloxPeopleNode():
	def __init__(self, checkpoint, exp_path, config, camera_info_path='/xtion/depth_registered/camera_info' , image_path= '/xtion/rgb/image_raw', depth_path='/xtion/depth_registered/image_raw', classid = 0, depth_scaling = 1):
		rospy.loginfo(logger_name="YoloxPeopleNode", msg="initializing:")
		rospy.loginfo(logger_name="YoloxPeopleNode", msg=f" - checkpoint={checkpoint}")
		rospy.loginfo(logger_name="YoloxPeopleNode", msg=f" - exp_path={exp_path}")
		self.pub = rospy.Publisher('~poses', PoseArray, queue_size=1)
		self.classid = classid
		self.depth_scaling = depth_scaling

		self.exp = get_exp(exp_path,"")
		if "conf" in config:
			self.exp.test_conf = config["conf"]

		self.recognizer = recognizer.Recognizer(checkpoint, self.exp)

		self._bridge = CvBridge()
		image_sub = message_filters.Subscriber(image_path, Image)
		info_sub = message_filters.Subscriber(camera_info_path, CameraInfo)
		depth_sub = message_filters.Subscriber(depth_path, Image)
		self.ts = message_filters.ApproximateTimeSynchronizer([image_sub, info_sub, depth_sub], 1, 1) 
		self.ts.registerCallback(self.callback)

		self.camera = cameramodels.PinholeCameraModel()

	def callback(self, image, camera_info, depth_raw):

		#print("got images")
		try:
			img = self._bridge.imgmsg_to_cv2(image, "bgr8")
			depth = self._bridge.imgmsg_to_cv2(depth_raw, "passthrough")
			if(depth.dtype==np.float32):
				self.depth_scaling=1
			elif(depth.dtype==np.uint16):
				self.depth_scaling=0.001
			else:
				self.depth_scaling=1
		except CvBridgeError as e:
			error_msg = "Could not convert to opencv image: %s" % e
			rospy.logerr(logger_name="YoloxPeopleNode", msg=error_msg)
			raise Exception(error_msg)
		(cls, scores, bboxes) = self.recognizer.inference(img)
		
		self.camera.fromCameraInfo(camera_info)
		constant_y = self.depth_scaling / self.camera.fy()
		constant_x = self.depth_scaling / self.camera.fx()
		
		msg = PoseArray()
		msg.header = image.header
		for c, score, box in zip(cls, scores, bboxes):
			if(c == self.classid and score >0.5):
				yc= ((box[1] + box[3])/2).item()
				xc = ((box[0] + box[2])/2).item()
				mean_point_depth= (depth[int(yc)][int(xc)])
				#if (np.isnan(mean_point_depth)):
				#	mean_point_depth= 0
				rospy.logdebug(logger_name="YoloxPeopleNode", msg=f"human: {yc}, {xc}, {mean_point_depth}")
				pose = Pose()
				pose.position.x = (int(xc) - self.camera.cx()) * mean_point_depth * constant_x
				pose.position.y = (int(yc) - self.camera.cy()) * mean_point_depth * constant_y
				pose.position.z = mean_point_depth * self.depth_scaling
				pose.orientation.w = 1
				msg.poses.append(pose)
		self.pub.publish(msg)

if __name__ == '__main__':

	# Start ROS node
	rospy.init_node('yolox_people_tracker')
	
	try:
		_checkpoint = os.path.expanduser(rospy.get_param("~checkpoint"))
		_exp_path = os.path.expanduser(rospy.get_param("~exp"))
		_config = rospy.get_param("~")
		_camera_info = rospy.get_param("~camera_info")
		_img = rospy.get_param("~img")
		_depth = rospy.get_param("~depth")
		_cid = rospy.get_param("~classid")
		_depth_scaling = rospy.get_param("~depth_scaling")
	except KeyError as e:
		rospy.logerr(logger_name="YoloxPeopleNode", msg="Parameter %s not found" % e)
		sys.exit(1)

	node = YoloxPeopleNode(_checkpoint, _exp_path, _config, _camera_info, _img, _depth, _cid, _depth_scaling)

	rospy.loginfo(logger_name="YoloxPeopleNode", msg="\nyolox person detection running")

	rospy.spin()
